{"version":3,"sources":["Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","timerId","setInterval","setState","console","log","toLocaleTimeString","this","prevProps","oldName","name","newName","props","clearInterval","className","Component","getRandomName","value","Math","random","toString","slice","App","clockName","hasClock","timerName","document","addEventListener","React","ReactDOM","render","getElementById"],"mappings":"sNAUMA,E,4MACJC,MAAQ,CACNC,KAAM,IAAIC,M,EAGZC,QAAUC,aAAY,WACpB,EAAKC,SAAS,CAAEJ,KAAM,IAAIC,OAE1BI,QAAQC,IAAI,EAAKP,MAAMC,KAAKO,wBAC3B,K,uDAEH,WACE,OAAOC,KAAKN,U,gCAGd,SAAmBO,GACjB,IAAcC,EAAYD,EAAlBE,KACMC,EAAYJ,KAAKK,MAAvBF,KAEJD,IAAYE,GAEdP,QAAQC,IAAR,uBAA4BI,EAA5B,eAA0CE,M,kCAI9C,WACEE,cAAcN,KAAKN,W,oBAGrB,WACE,OACE,sBAAKa,UAAU,QAAf,UACE,iCAASP,KAAKK,MAAMF,OACnB,YACAH,KAAKT,MAAMC,KAAKO,4B,GAlCLS,aAwCLlB,IC9Cf,SAASmB,IACP,IAAMC,EAAQC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAEhD,MAAM,SAAN,OAAgBJ,GAQX,IAAMK,EAAb,4MACExB,MAAQ,CACNyB,UAAWP,IACXQ,UAAU,GAHd,EAMEC,UAAYvB,aAAY,WACtB,EAAKC,SAAS,CAAEoB,UAAWP,QAC1B,MARL,uDAUE,WAAqB,IAAD,OASlB,OARAU,SAASC,iBAAiB,SAAS,WACjC,EAAKxB,SAAS,CAAEqB,UAAU,OAG5BE,SAASC,iBAAiB,eAAe,WACvC,EAAKxB,SAAS,CAAEqB,UAAU,OAGrBjB,KAAKkB,YAnBhB,kCAsBE,WACEZ,cAAcN,KAAKkB,aAvBvB,oBA0BE,WACE,MAAgClB,KAAKT,MAA7B0B,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,UAElB,OACE,sBAAKT,UAAU,MAAf,UACE,6CAECU,GACC,cAAC,EAAD,CAAOd,KAAMa,WAlCvB,GAAyBK,IAAMb,WCZ/Bc,IAASC,OACP,cAAC,EAAD,IACAJ,SAASK,eAAe,W","file":"static/js/main.2626da0c.chunk.js","sourcesContent":["import { Component } from 'react';\n\ninterface Props {\n  name: string,\n}\n\ntype State = {\n  date: Date,\n};\n\nclass Clock extends Component <Props, State> {\n  state = {\n    date: new Date(),\n  };\n\n  timerId = setInterval(() => {\n    this.setState({ date: new Date() });\n    // eslint-disable-next-line no-console\n    console.log(this.state.date.toLocaleTimeString());\n  }, 1000);\n\n  componentDidMount() {\n    return this.timerId;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { name: oldName } = prevProps;\n    const { name: newName } = this.props;\n\n    if (oldName !== newName) {\n      // eslint-disable-next-line no-console\n      console.log(`Renamed from ${oldName} to ${newName}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    return (\n      <div className=\"clock\">\n        <strong>{this.props.name}</strong>\n        {' time is '}\n        {this.state.date.toLocaleTimeString()}\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from 'react';\nimport './App.scss';\nimport Clock from './Clock/Clock';\n\nfunction getRandomName(): string {\n  const value = Math.random().toString().slice(2, 6);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  clockName: string,\n  hasClock: boolean,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    clockName: getRandomName(),\n    hasClock: true,\n  };\n\n  timerName = setInterval(() => {\n    this.setState({ clockName: getRandomName() });\n  }, 3300);\n\n  componentDidMount() {\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n\n    document.addEventListener('contextmenu', () => {\n      this.setState({ hasClock: false });\n    });\n\n    return this.timerName;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerName);\n  }\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && (\n          <Clock name={clockName} />\n        )}\n      </div>\n    );\n  }\n}\n// export default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}